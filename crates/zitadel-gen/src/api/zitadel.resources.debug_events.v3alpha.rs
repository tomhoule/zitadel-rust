// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    #[prost(oneof="event::Event", tags="1, 2, 3")]
    pub event: ::core::option::Option<event::Event>,
}
/// Nested message and enum types in `Event`.
pub mod event {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Event {
        #[prost(message, tag="1")]
        Add(super::AddedEvent),
        #[prost(message, tag="2")]
        Change(super::ChangedEvent),
        #[prost(message, tag="3")]
        Remove(super::RemovedEvent),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddedEvent {
    /// issues a pg_sleep command in the projection reducer, simulating a slow query.
    #[prost(message, optional, tag="1")]
    pub projection_sleep: ::core::option::Option<::pbjson_types::Duration>,
    /// optional text that can be set as a state.
    #[prost(string, optional, tag="2")]
    pub blob: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangedEvent {
    /// issues a pg_sleep command in the projection reducer, simulating a slow query.
    #[prost(message, optional, tag="1")]
    pub projection_sleep: ::core::option::Option<::pbjson_types::Duration>,
    /// optional text that can be set as a state.
    #[prost(string, optional, tag="2")]
    pub blob: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RemovedEvent {
    /// issues a pg_sleep command in the projection reducer, simulating a slow query.
    #[prost(message, optional, tag="1")]
    pub projection_sleep: ::core::option::Option<::pbjson_types::Duration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct State {
    /// Details provide some base information (such as the last change date) of the schema.
    #[prost(message, optional, tag="1")]
    pub details: ::core::option::Option<super::super::object::v3alpha::Details>,
    #[prost(string, tag="2")]
    pub blob: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDebugEventsRequest {
    #[prost(message, optional, tag="1")]
    pub instance: ::core::option::Option<super::super::super::object::v3alpha::Instance>,
    /// unique identifier for the aggregate we want to push events to.
    #[prost(string, tag="2")]
    pub aggregate_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub events: ::prost::alloc::vec::Vec<Event>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDebugEventsResponse {
    #[prost(message, optional, tag="1")]
    pub details: ::core::option::Option<super::super::object::v3alpha::Details>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDebugEventsStateByIdRequest {
    /// unique identifier of the aggregate.
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub trigger_bulk: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDebugEventsStateByIdResponse {
    #[prost(message, optional, tag="1")]
    pub state: ::core::option::Option<State>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListDebugEventsStatesRequest {
    #[prost(bool, tag="1")]
    pub trigger_bulk: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListDebugEventsStatesResponse {
    #[prost(message, repeated, tag="1")]
    pub states: ::prost::alloc::vec::Vec<State>,
}
include!("zitadel.resources.debug_events.v3alpha.tonic.rs");
// @@protoc_insertion_point(module)